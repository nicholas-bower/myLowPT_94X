#include "DataFormats/CaloRecHit/interface/CaloCluster.h"
#include "DataFormats/CaloRecHit/interface/CaloClusterFwd.h"
#include "DataFormats/Common/interface/ValueMap.h"
#include "DataFormats/EcalRecHit/interface/EcalRecHit.h"
#include "DataFormats/EcalRecHit/interface/EcalRecHitCollections.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronFwd.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronCore.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronCoreFwd.h"
#include "DataFormats/EgammaReco/interface/SuperCluster.h"
#include "DataFormats/EgammaReco/interface/SuperClusterFwd.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrackFwd.h"
#include "DataFormats/ParticleFlowReco/interface/GsfPFRecTrack.h"
#include "DataFormats/ParticleFlowReco/interface/GsfPFRecTrackFwd.h"
#include "DataFormats/ParticleFlowReco/interface/PFCluster.h"
#include "DataFormats/ParticleFlowReco/interface/PFClusterFwd.h"
#include "DataFormats/ParticleFlowReco/interface/PFRecTrack.h"
#include "DataFormats/ParticleFlowReco/interface/PFRecTrackFwd.h"
#include "DataFormats/ParticleFlowReco/interface/PreId.h"
#include "DataFormats/ParticleFlowReco/interface/PreIdFwd.h"
#include "DataFormats/TrajectorySeed/interface/TrajectorySeed.h"
#include "DataFormats/TrackCandidate/interface/TrackCandidate.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/ESHandle.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include <string>
#include <vector>
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "TH1.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "SimDataFormats/GeneratorProducts/interface/GenRunInfoProduct.h"

using namespace std;
using namespace reco;

class myLowPtGsfElectronsAnalyzer: public edm::EDAnalyzer {

public:
  
  explicit myLowPtGsfElectronsAnalyzer( const edm::ParameterSet& );
  
  ~myLowPtGsfElectronsAnalyzer() {
  
  }

private:

  virtual void analyze( const edm::Event&, const edm::EventSetup& );

  //const edm::EDGetTokenT<std::vector<reco::GenParticle> > genParticles_;
  //const edm::EDGetTokenT<GenEventInfoProduct> genInfo_;
  const edm::EDGetTokenT< std::vector<reco::GsfElectron> > electrons_;
  const std::vector<edm::InputTag> mvaIdTags_;
  std::vector< edm::EDGetTokenT< edm::ValueMap<float> > >  mvaIds_;
  const std::vector<edm::InputTag> mvaSeedTags_;
  std::vector< edm::EDGetTokenT< edm::ValueMap<float> > >  mvaSeeds_;
  TH1D *idHist;
};

myLowPtGsfElectronsAnalyzer::myLowPtGsfElectronsAnalyzer( const edm::ParameterSet& cfg ) :

  electrons_{consumes< std::vector<reco::GsfElectron> >(cfg.getParameter<edm::InputTag>("electrons"))},  
  //genParticles_{consumes<std::vector<reco::GenParticle> > (cfg.getParameter<edm::InputTag>("prunedGenParticles"))},
  //genInfo_{consumes<GenEventInfoProduct> (cfg.getParameter<edm::InputTag>("genInfo"))}
  mvaIdTags_(cfg.getParameter< std::vector<edm::InputTag> >("mvaIds")),
  mvaIds_(),
  mvaSeedTags_(cfg.getParameter< std::vector<edm::InputTag> >("mvaSeeds")),
  mvaSeeds_()
{
  for ( const auto& tag : mvaIdTags_ ) { 
    mvaIds_.push_back( consumes< edm::ValueMap<float> >(tag) ); 
  }
  for ( const auto& tag : mvaSeedTags_ ) { 
    mvaSeeds_.push_back( consumes< edm::ValueMap<float> >(tag) ); 
  }
  
   edm::Service<TFileService> fs;
   idHist = fs->make<TH1D>("electronID" , "Electron ID" , 4 , 0 , 4 );

}

void myLowPtGsfElectronsAnalyzer::analyze( const edm::Event& iEvent, 
					 const edm::EventSetup& iSetup )
{

  //edm::Handle< std::vector<reco::GenParticle> > genParticles;
  //try{iEvent.getByToken(genParticles_, genParticles);}
  //catch (...) {;}

  //edm::Handle< GenEventInfoProduct > genInfo;
  //try{iEvent.getByToken(genInfo_, genInfo);}
  //catch (...) {;}
  //float genWeight=genInfo->weight();
  edm::Handle<GenParticleCollection> genParticles;
  iEvent.getByLabel("genParticles", genParticles);
  edm::Handle<GenEventInfoProduct> genEvtInfo;
  iEvent.getByLabel( "generator", genEvtInfo );
  double genWeight=genEvtInfo->weight();
  edm::Handle< std::vector<reco::GsfElectron> > electrons;
  try { iEvent.getByToken(electrons_, electrons); }
  catch (...) {;}

//  edm::Handle< edm::ValueMap<float> > mvaId;
//  try { iEvent.getByToken(mvaId_, mvaId); }
//  catch (...) {;}
    
  std::vector< edm::Handle< edm::ValueMap<float> > > mvaIds;
  for ( const auto& token : mvaIds_ ) { 
    edm::Handle< edm::ValueMap<float> > h;
    try { iEvent.getByToken(token, h); }
    catch (...) {;}
    mvaIds.push_back(h);
  }

  std::vector< edm::Handle< edm::ValueMap<float> > > mvaSeeds;
  for ( const auto& token : mvaSeeds_ ) { 
    edm::Handle< edm::ValueMap<float> > h;
    try { iEvent.getByToken(token, h); }
    catch (...) {;}
    mvaSeeds.push_back(h);
  }
    
  //std::cout << "[myLowPtGsfElectronsAnalyzer::analyze]" << std::endl

	    //<< "  electrons:         " << int( electrons.isValid() ? electrons->size() : -1 ) << std::endl;
  for ( unsigned int iter = 0; iter < mvaIds.size(); ++iter ) {
    //std::cout << "  mvaId:             " 
	      //<< int( mvaIds[iter].isValid() ? mvaIds[iter]->size() : -1 ) 
	      //<< ", ";
    if ( mvaIds[iter].isValid() &&
	 !mvaIds[iter]->empty() &&
	 electrons.isValid() ) {
     for(int i = 0; electrons->size(); i++){
        reco::GsfElectronRef ele(electrons,i);
        //std::cout << "\"" << mvaIdTags_[iter].instance() << "\" ";
        if ( ele.isNonnull() ) { 
          //std::cout << "(example value: " << float( (*mvaIds[iter])[ele] ) << ")"; 
          idHist->Fill(float( (*mvaIds[iter])[ele] ), genWeight);
        
        }
      }
    } 

    //std::cout << std::endl;
  }
  //for ( unsigned int iter = 0; iter < mvaSeeds.size(); ++iter ) {
    //std::cout << "  mvaSeed:           " 
	      //<< int( mvaSeeds[iter].isValid() ? mvaSeeds[iter]->size() : -1 ) 
	      //<< ", ";
    //if ( mvaSeeds[iter].isValid() && 
	 //!mvaSeeds[iter]->empty() &&
	 //gsf_tracks.isValid() ) {
    //  reco::GsfTrackRef gsf(gsf_tracks,0);
    //  std::cout << "\"" << mvaSeedTags_[iter].instance() << "\" ";
    //  if ( gsf.isNonnull() ) { std::cout << "(example value: " << float( (*mvaSeeds[iter])[gsf] ) << ")"; }
    //}
    //std::cout << std::endl;

  //}


}
#include "FWCore/Framework/interface/MakerMacros.h"

DEFINE_FWK_MODULE(myLowPtGsfElectronsAnalyzer);
